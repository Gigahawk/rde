{ config, lib, pkgs, inputs, username, ... }:
with lib;
let
  hm = config.home-manager.users.${username};
  emacs-with-pkgs =
    (pkgs.unstable.emacsPackagesGen pkgs.unstable.emacsGit).emacsWithPackages;
  cfg = config.rde.emacs;

  # Source: https://gitlab.com/rycee/nur-expressions/-/blob/master/hm-modules/emacs-init.nix#L9
  packageFunctionType = mkOptionType {
    name = "packageFunction";
    description =
      "Function returning list of packages, like epkgs: [ epkgs.org ]";
    check = isFunction;
    merge = mergeOneOption;
  };

  varType = types.submodule ({ name, config, ... }: {
    options = {
      value = mkOption { type = types.either types.str types.int; };
      docstring = mkOption {
        type = types.str;
        default = "";
      };
    };
  });

  varSetToConfig = v:
    let
      valueToStr = v:
        if (isString v.value) then ''"${v.value}"'' else toString v.value;
      ifDocString = v:
        if (stringLength v.docstring > 0) then " \"${v.docstring}\"" else "";
      tmp = mapAttrsToList (name: value: ''
        (defvar ${name} ${valueToStr value}${ifDocString value})
      '') v;
    in concatStrings tmp;

  precfgType = types.submodule ({ name, config, ... }: {
    options = {
      enable = mkEnableOption "Enable precfg.${name}";

      packages = mkOption {
        type = types.either
          ((types.listOf types.str) // { description = "List of packages"; })
          packageFunctionType;
        default = [ name ];
        description = ''
          The package to use for this module. Either the package name
          within the Emacs package set or a function taking the Emacs
          package set and returning a package list.
        '';
      };
      config = mkIf config.enable {

      };

    };
  });

  mkROFileOption = path:
    (mkOption {
      type = types.path;
      description = "Files autogenerated by rde";
      default = path;
      readOnly = true;
    });
in {

  imports = [ ];
  options = {
    rde.emacs = {
      enable = mkEnableOption "Enable rde emacs";
      dir = mkOption {
        type = types.path;
        description =
          "Directory, where emacs configuration files will be placed.";
        default =
          "${config.home-manager.users.${username}.xdg.configHome}/emacs";
      };
      files = {
        init = mkROFileOption "${config.rde.emacs.dir}/init.el";
        early-init = mkROFileOption "${config.rde.emacs.dir}/early-init.el";
        custom = mkOption {
          type = types.path;
          description = "Path to custom.el.";
          default = "${
              config.home-manager.users.${username}.xdg.dataHome
            }/emacs/custom.el";
        };
      };

      # user-init = mkOption {
      #   type = types.path;
      #   description = "Can source"
      #   default = "${config.rde.emacs.dir}/user.el";
      # };
      # custom-file = mkFileOption "${config.rde.emacs.dir}/custom.el";

      config = mkOption {
        type = types.lines;
        description = ''
          Every config adds use-package declaration(s) here.
          Don't use it for user defined configurations.'';
        default = "";
      };

      vars = mkOption {
        type = types.attrsOf varType;
        description = "Every config adds variable declaration(s) here.";
        default = "";
      };

      font = mkOption {
        type = types.str;
        default = config.rde.font;
      };
      fontSize = mkOption {
        type = types.int;
        default = config.rde.fontSize;
      };

    };
  };

  config = mkIf config.rde.emacs.enable {
    rde.emacs.vars = {
      "rde/username" = {
        value = username;
        docstring = "System username provided by rde.";
      };
      "rde/custom-file" = {
        value = cfg.files.custom;
        docstring = "Path to custom.el.";
      };
      "rde/font-family".value = cfg.font;
      "rde/font-size".value = cfg.fontSize;
    };
    home-manager.users."${username}" = {
      home.file."${cfg.files.init}".text = ''
        (require 'rde-variables)
        (require 'rde-configs)
      ''
      ;
      home.file."${cfg.files.early-init}".source = ./early-init.el;

      home.packages = with pkgs; [
        emacs-all-the-icons-fonts
        sqlite
        (emacs-with-pkgs (epkgs:
          let
            build-emacs-package = pname: text:
              (epkgs.trivialBuild {
                pname = pname;
                version = "1.0";
                src = pkgs.writeText "${pname}.el" text;
                packageRequires = [ epkgs.use-package ];
                preferLocalBuild = true;
                allowSubstitutes = false;
              });

            rde-variables-text = (varSetToConfig cfg.vars) + ''

              (provide 'rde-variables)
            '';
            rde-variables-package =
              build-emacs-package "rde-variables" rde-variables-text;
            rde-configs-package =
              build-emacs-package "rde-configs" (readFile ./rde-configs.el);
            

          in with epkgs; [
            rde-variables-package
            rde-configs-package
            use-package
            nix-mode
            magit
            modus-operandi-theme
            org
            org-roam
            company-org-roam
            company
            ivy
            olivetti
            restart-emacs
            keycast
          ]))
      ];
    };
  };
}
