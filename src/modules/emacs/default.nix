{ config, lib, pkgs, inputs, username, ... }:
with lib;
let
  hm = config.home-manager.users.${username};
  emacs = config.rde.emacs;
  emacs-init = "${hm.xdg.configHome}/emacs/init.el";
  emacs-early-init = "${hm.xdg.configHome}/emacs/early-init.el";
  mkROFileOption = path:
    (mkOption {
      type = types.path;
      description = "Files autogenerated by rde";
      default = path;
      internal = true;
      readOnly = true;
    });
in {

  imports = [ ];
  options = {
    rde.emacs = {
      enable = mkEnableOption "Enable rde emacs";
      dir = mkOption {
        type = types.path;
        description =
          "Directory, where emacs configuration files will be placed.";
        default =
          "${config.home-manager.users.${username}.xdg.configHome}/emacs";
      };
      files = {
        init = mkROFileOption "${config.rde.emacs.dir}/init.el";
        early-init = mkROFileOption "${config.rde.emacs.dir}/early-init.el";
        rde-features =
          mkROFileOption "${config.rde.emacs.dir}/rde/rde-features.el";
        rde-variables = mkROFileOption "${config.rde.emacs.dir}/rde/rde-variables.el";
        custom = mkOption {
          type = types.path;
          description = "Path to custom.el.";
          default = "${
              config.home-manager.users.${username}.xdg.dataHome
            }/emacs/custom.el";
        };
      };

      # user-init = mkOption {
      #   type = types.path;
      #   description = "Can source"
      #   default = "${config.rde.emacs.dir}/user.el";
      # };
      # custom-file = mkFileOption "${config.rde.emacs.dir}/custom.el";

      config = mkOption {
        type = types.lines;
        description = ''
          Every feature adds use-package declaration(s) here.
          Don't use it for user defined configurations.'';
        default = "";
      };

      vars = mkOption {
        type = types.lines;
        description = "Every feature adds variable declaration(s) here.";
        default = "";
      };

      font = mkOption {
        type = types.str;
        default = config.rde.font;
      };
      fontSize = mkOption {
        type = types.int;
        default = config.rde.fontSize;
      };

      layers = {
        enableEverything = mkEnableOption
          "Enable all rde emacs layers with all keybindings and features";
        use-package = { enable = true; };
        reasonable-defaults = { a = { }; };
        mu4e = {
          system-packages = with pkgs; [ offlineimap mu4e ];

          config = { rde.email-sync.enable = true; };
          keybindings = false;
          enchanceBehaviour = true;
        };
      };
    };
  };

  config = mkIf config.rde.emacs.enable {
    _module.args.emacs-dir = "${hm.xdg.configHome}" /emacs;
    home-manager.users.${config.rde.username} = {
      home.file."${emacs-init}".text = mkBefore (readFile ./init.el);
      home.file."${emacs-early-init}".source = ./early-init.el;

      home.packages = with pkgs; [ emacs-all-the-icons-fonts sqlite ];
      programs.emacs = {
        enable = true;
        package = pkgs.emacsGit;
        extraPackages = epkgs:
          with epkgs; [
            use-package
            nix-mode
            magit
            modus-operandi-theme
            org
            org-roam
            company-org-roam
            company
            ivy
            olivetti
            restart-emacs
            keycast
          ];
      };
    };
  };
}
