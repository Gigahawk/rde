#+TITLE: Simple emacs literate config
#+BABEL: :cache yes
#+STARTUP: content
#+LATEX_HEADER: \usepackage{parskip}
#+LATEX_HEADER: \usepackage{inconsolata}
#+LATEX_HEADER: \usepackage[utf8]{inputenc}
#+PROPERTY: header-args :tangle yes

** Credits

Thanks for inpiration to [[https://github.com/mitrx][Dmitry Alexeev]].

** Configuration

Configuration from [[./init.org][init.org]] will be loaded by [[./init.el][init.el]].

*** Org tangle-mangle

Some magic with tangling org config.

#+BEGIN_SRC emacs-lisp
;;; -*- lexical-binding: t -*-
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (setq user-emacs-directory (file-truename "~/.emacs.d/"))
  (defun tangle-init ()
    "If the current buffer is 'init.org' the code-blocks are
  tangled, and the tangled file is compiled."
    (when (equal (buffer-file-name)
		 (expand-file-name (concat user-emacs-directory "init.org")))
      ;; Avoid running hooks when tangling.
      (let ((prog-mode-hook nil))
	(org-babel-tangle)
	(byte-compile-file (concat user-emacs-directory "init.el")))))

  (add-hook 'after-save-hook 'tangle-init)
#+END_SRC

*** Packages
**** Init package system
#+BEGIN_SRC emacs-lisp
(require 'cl-lib)
(require 'package)
(package-initialize)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
(add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/"))
(add-to-list 'package-pinned-packages '(cider . "melpa-stable") t)
#+END_SRC

**** Package list
#+BEGIN_SRC emacs-lisp
  (let* ((package--builtins nil)
	 (packages
	  '(auto-compile         ; automatically compile Emacs Lisp libraries
	    org
	    treemacs
	    beacon
	    cider                ; Clojure Interactive Development Environment
	    clj-refactor         ; A collection of clojure refactoring functions
	    company              ; Modular text completion framework
	    ivy
	    swiper
	    counsel
	    avy                  ; jump to visible characters
	    magit                ; control Git from Emacs
	    git-link
	    rainbow-delimiters
	    base16-theme
	    nord-theme
	    leuven-theme
	    ;; doom-themes
	    paredit              ; minor mode for editing parentheses
	    projectile           ; Manage and navigate projects in Emacs easily
	    rust-mode
	    yaml-mode
	    nix-mode
	    markdown-mode
	    writeroom-mode
	    org-super-agenda
	    major-mode-hydra
	    posframe
;;	    hydra-posframe
	    ivy-posframe
	    which-key)))         ; Display available keybindings in popup
    (ignore-errors
      (let ((packages (cl-remove-if 'package-installed-p packages)))
	(when packages
	  ;; Install uninstalled packages
	  (package-refresh-contents)
	  (mapc 'package-install packages)))))
#+END_SRC

*** Modes

**** Basic modes

#+BEGIN_SRC emacs-lisp
  (dolist (mode
	   '(menu-bar-mode
	     tool-bar-mode
	     scroll-bar-mode
	     blink-cursor-mode))
    (funcall mode 0))

  (dolist (mode
	   '(projectile-global-mode
	     global-company-mode
	     column-number-mode
	     beacon-mode
	     yas-global-mode
	     show-paren-mode
	     ivy-mode
	     counsel-mode
	     which-key-mode
	     org-super-agenda-mode
	     ;; global-whitespace-mode
	     ))
    (funcall mode 1))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(dolist (mode '(cider-repl-mode
                clojure-mode
                lisp-mode
                emacs-lisp-mode
                lisp-interaction-mode
		rainbow-delimiters-mode))
  ;; add paredit-mode to all mode-hooks
  (add-hook (intern (concat (symbol-name mode) "-hook")) 'paredit-mode))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(add-hook 'clojure-mode-hook 'rainbow-delimiters-mode)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode))
(add-to-list 'auto-mode-alist '("\\.md\\'" . gfm-mode))
(add-to-list 'auto-mode-alist '("\\.nix\\'" . nix-mode))
#+END_SRC

**** org mode
#+BEGIN_SRC emacs-lisp
  (setq org-directory "~/org")
  (setq org-default-notes-file (concat org-directory "/todo.org"))
  (setq org-archive-location (concat org-directory "/archived.org::"))
  (setq org-agenda-files (list "~/org/todo.org"))
  (setq org-default-notes-file "~/org/todo.org")
  (setq org-refile-targets '((org-agenda-files . (:maxlevel . 2))))
  (setq org-hide-leading-stars t)
  (setq org-todo-keywords
      '((sequence "TODO" "NEXT" "|" "DONE" "DELEGATED")))
  (setq org-super-agenda-groups
	'((:name "Today"
		 :tag "Today")
	  (:name "Week plan"
		 :tag "Week")
	  (:name "Backlog"
		 :todo "TODO")))
  (setq org-src-window-setup 'current-window)
  (setq org-capture-templates
	`(("t" "Task" entry
	   (file+headline "~/org/todo.org" "Inbox")
	   "* TODO %?\n")
	  ("T" "Task" entry
	   (file+headline "~/org/todo.org" "Today")
	   "* TODO %?\n")
	  ("q" "Quick note" entry
	   (file+headline "~/org/todo.org" "Notes")
	   "* %? :Note:\n")
	  ))

#+END_SRC
*** Look and feel
**** Better defaults
#+BEGIN_SRC emacs-lisp
    (add-to-list 'custom-theme-load-path (expand-file-name "~/.emacs.d/themes/"))
  ;;  (load-theme 'nord t)
    (load-theme 'leuven t)
    (setq org-fontify-whole-heading-line t)
  ;;  (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-frame-bottom-left)))
    (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-frame-center)))
    (setq ivy-posframe-border-width 10)
  ;;  (setq ivy-posframe-display-functions-alist '((t . nil)))
  ;;  (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-point)))
    (ivy-posframe-mode 1)

    ;; (load-theme 'doom-tomorrow-day t)
    ;; (load-theme 'base16-tomorrow t)

    (set-face-attribute 'default nil :font "Iosevka 10")

    ;; blink modeline instead of beep
    (setq visible-bell nil
	  ring-bell-function 'flash-mode-line)
    (defun flash-mode-line ()
      (invert-face 'mode-line)
      (run-with-timer 0.1 nil #'invert-face 'mode-line))
    (add-to-list 'default-frame-alist '(fullscreen . maximized))
    (setq vc-follow-symlinks t)

    (recentf-mode 1)
    (run-at-time nil (* 5 60) 'recentf-save-list)

    (save-place-mode 1)
    (setq save-interprogram-paste-before-kill t
	  apropos-do-all t
	  mouse-yank-at-point t
	  require-final-newline t
	  load-prefer-newer t
	  ediff-window-setup-function 'ediff-setup-windows-plain
	  save-place-file (concat user-emacs-directory "places")
	  backup-directory-alist `(("." . ,(concat user-emacs-directory
						     "backups"))))
    (setq create-lockfiles nil)

    (global-set-key [remap list-buffers] 'ibuffer)
#+END_SRC

**** Buffer appearance rules

#+BEGIN_SRC emacs-lisp
  ;;  (set-frame-parameter nil 'unsplittable t)

    ;; (defun my-display-buffer-function (buf not-this-window)
    ;;   (if (and (not pop-up-frames)
    ;; 	  (one-window-p)
    ;; 	  (or not-this-window
    ;; 	      (not (eq (window-buffer (selected-window)) buf)))
    ;; 	  (> (frame-width) 162))
    ;;       (split-window-horizontally))
    ;;   ;; Note: Some modules sets `pop-up-windows' to t before calling
    ;;   ;; `display-buffer' -- Why, oh, why!
    ;;   (let ((display-buffer-function nil)
    ;; 	(pop-up-windows nil))
    ;;     (display-buffer buf not-this-window)))

    ;; (setq display-buffer-function 'my-display-buffer-function)


#+END_SRC
*** Keybindings

#+BEGIN_SRC emacs-lisp
;; (hydra-posframe-enable)
#+END_SRC

**** Global hydra
#+BEGIN_SRC emacs-lisp
  (defun kill-other-window-buffer ()
    "Kill buffer in other window"
    (interactive)
    (other-window 1)
    (kill-this-buffer)
    (other-window 1))

  (defhydra hydra-window-menu
    (:color pink :hint nil)
    ("o" other-window "other window" :column "windows" :color blue)
    ("O" other-window "other window" :column "windows")
    ("w" kill-other-window-buffer "kill other window buffer" :column "buffers")
    ("W" kill-other-window-buffer "kill other window buffer" :color blue)
    ("n" switch-to-next-buffer "next buffer other window")
    ("p" switch-to-prev-buffer "prev buffer other window")
    ("M-n" (switch-to-next-buffer (next-window)) "next buffer other window")
    ("M-p" (switch-to-prev-buffer (next-window)) "prev buffer other window")
    ("q" nil "quit" :column "quit"))

  (global-set-key
   (kbd "s-e")
   (defhydra hydra-global-menu
     (:color blue :hint nil)
     ("p f" projectile-find-file "project find file" :color blue :column "project")
     ("p t" treemacs-select-window "project tree" :color blue)
     ("t t" treemacs "toggle tree" :color blue :column "toggle")
     ("f r" counsel-recentf "recentf" :color blue :column "files")
     ("f i" (lambda () (interactive) (find-file "~/.emacs.d/init.org")) "init.org")
     ("f t" (lambda () (interactive) (find-file "~/org/todo.org")) "todo.org")
     ("s s" counsel-rg "ripgrep" :color blue)
     ("n w" widen "widen" :column "narrow")
     ("n s" org-narrow-to-subtree "subtree")
     ("n e" org-narrow-to-element "element")
     ("o t" org-todo-list "todo" :column "org" :color blue)
     ("o a" org-agenda-list "agenda")
     ("o c" org-capture "capture")
     ("w" hydra-window-menu/body "window/buffer menu" :column "hydras")
     ))


  ;; (global-set-key (kbd "s-e") 'hydra-global-menu/body)

#+END_SRC
**** Major hydra
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-o") #'major-mode-hydra)

  (major-mode-hydra-define org-mode nil
    ("Refile"
     (("r" org-refile "refile"))))

  (major-mode-hydra-define clojure-mode nil
    ("Eval"
     (("e e" 'cider-eval-last-sexp "eval last sexp")
      ("e f" 'cider-eval-defun-at-point "eval form")
      ("e p" 'cider-pprint-eval-defun-at-point "eval form with pprint")
      )))
#+END_SRC
**** Misc
#+BEGIN_SRC emacs-lisp
  (add-hook 'cider-repl-mode-hook (lambda () (local-set-key (kbd "C-l") 'cider-repl-clear-buffer)))

  (defun prev-window ()
    (interactive)
    (other-window -1))
  (global-set-key (kbd "C-.") #'other-window)
  (global-set-key (kbd "C-,") #'prev-window)
  (global-set-key (kbd "s-.") 'ace-window)
  (global-set-key (kbd "M-/") 'hippie-expand)
  (global-set-key (kbd "M-z") 'zap-up-to-char)

  (global-set-key (kbd "C-;") 'avy-goto-char)
  (global-set-key (kbd "C-s") 'swiper)
  (global-set-key (kbd "C-c g") 'counsel-rg)
  (global-set-key (kbd "C-h") 'delete-backward-char)
  (global-set-key (kbd "C-?") 'help-command)
  (global-set-key (kbd "C-x g") 'magit-status)

#+END_SRC

*** Whitespaces
Show trailing whitespaces and cleanup them on save.

#+BEGIN_SRC emacs-lisp
(setq whitespace-style '(face trailing spaces space-mark))
(setq-default show-trailing-whitespace t)
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

*** Projectile

#+BEGIN_SRC emacs-lisp
(setq projectile-completion-system 'ivy)
(setq projectile-create-missing-test-files t)
#+END_SRC

*** Other stuff

#+BEGIN_SRC emacs-lisp
(setq ivy-initial-inputs-alist nil)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist '(("." . "~/.emacs.d/backup"))
  backup-by-copying t    ; Don't delink hardlinks
  version-control t      ; Use version numbers on backups
  delete-old-versions t  ; Automatically delete excess backups
  kept-new-versions 20   ; how many of the newest versions to keep
  kept-old-versions 5    ; and how many of the old
  )
#+END_SRC

#+BEGIN_SRC emacs-lisp
(set-language-environment "UTF-8")
#+END_SRC
